/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;
//Importação de pacotes necessários
import java.awt.Color; 
import static java.awt.Color.black;
import static java.awt.Color.white;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import util.*;
import sort.*;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Fernando Santello
 */

public class Tela extends javax.swing.JFrame {
        //Criação dos atributos da classe.
        DefaultListModel listModel;
        private static long[] SET = {  };
        String logaux="", logcontent="";
        long w,g;
        
    /**
     * Creates new form tela
     */
    public Tela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton19 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton14 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ordenador de Dados - Lovelace");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));
        jPanel1.setName(""); // NOI18N

        jButton8.setBackground(new java.awt.Color(255, 255, 255));
        jButton8.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton8.setText("10");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(255, 255, 255));
        jButton16.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton16.setText("50");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(255, 255, 255));
        jButton9.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton9.setText("100");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(255, 255, 255));
        jButton17.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton17.setText("1.000");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(255, 255, 255));
        jButton10.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton10.setText("500");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton18.setBackground(new java.awt.Color(255, 255, 255));
        jButton18.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton18.setText("5.000");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(255, 255, 255));
        jButton11.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton11.setText("10.000");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(255, 255, 255));
        jButton12.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton12.setText("100.000");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel6.setText("Gerar localizações aleatórias:");

        jLabel8.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        jLabel8.setText("Quantidade personalizada:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(255, 255, 255));
        jButton19.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton19.setText("Gerar");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        jLabel10.setText("TEAM ");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/Lovelace_Logo.png"))); // NOI18N

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jScrollPane1.setViewportView(jTextArea1);

        jLabel4.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel4.setText("Localizações desordenadas");

        jButton13.setBackground(new java.awt.Color(255, 255, 255));
        jButton13.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jButton13.setText("Limpar campo");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton1.setText("Quick Sort");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton6.setText("Selection Sort");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton5.setText("Merge Sort");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton3.setText("Heap Sort");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton7.setText("Shell Sort");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton4.setText("Insertion Sort");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton2.setText("Bubble Sort");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel7.setText("Método de ordenação");

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jScrollPane2.setViewportView(jTextArea2);

        jButton14.setBackground(new java.awt.Color(255, 255, 255));
        jButton14.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jButton14.setText("Limpar campo");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Sitka Text", 1, 24)); // NOI18N

        jButton15.setBackground(new java.awt.Color(255, 255, 255));
        jButton15.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        jButton15.setText("Limpar Log");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jLabel1.setText("LOG de operações:");

        jLabel5.setFont(new java.awt.Font("Sitka Text", 0, 16)); // NOI18N
        jLabel5.setText("Localizações ordenadas");

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jScrollPane3.setViewportView(jTextArea3);

        jLabel2.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N

        jButton20.setBackground(new java.awt.Color(255, 255, 255));
        jButton20.setFont(new java.awt.Font("Sitka Text", 0, 18)); // NOI18N
        jButton20.setText("1.000.000");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8)
                                            .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(92, 92, 92)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(12, 12, 12)
                                                        .addComponent(jLabel4)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(68, 68, 68)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(11, 11, 11))))
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel10)))
                                .addGap(95, 95, 95)
                                .addComponent(jScrollPane3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(293, 293, 293)
                                .addComponent(jLabel1)
                                .addGap(480, 480, 480)
                                .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(25, 879, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton14))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(73, 73, 73)
                                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton13))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jButton15))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(174, 174, 174)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jMenu1.setText("Importar");
        jMenu1.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jMenuItem3.setText("Importar desordenado");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Exportar");
        jMenu2.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jMenuItem1.setText("Exportar ordenado");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jMenuItem2.setText("Exportar log");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jMenuItem4.setText("Exportar desordenado");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Informações");
        jMenu3.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem7.setText("Info Úteis");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Tema");
        jMenu4.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        jMenuItem5.setText("Tema Padrão");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuItem6.setText("Tema Noturno");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //Botão do Quick Sort
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       //Chama o método que vê se o array SET, que é o array a ser organizado, está nulo
        if (ChecadorNull(SET)==false){ 
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Quick Sort com o array preenchido
        QuickSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "QUICK SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    //Botão do Merge Sort
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       //Chama o método que vê se o array SET, que é o array a ser organizado, está nulo
        if (ChecadorNull(SET)==false){
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Merge Sort com o array preenchido
        MergeSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "MERGE SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    //Botão do Bubble Sort
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Chama o método que vê se o array SET, que é o array a ser organizado, está nulo
        if (ChecadorNull(SET)==false){
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Bubble Sort com o array preenchido
        BubbleSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "BUBBLE SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    //Botão do Heap Sort
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Chama o método que vê se o array SET, que é o array a ser organizado, está nulo
        if (ChecadorNull(SET)==false){
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Heap Sort com o array preenchido
        HeapSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "HEAP SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Botão do Selection Sort
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Chama o método que vê se o array SET, que é o array a ser organizado, está nulo
        if (ChecadorNull(SET)==false){
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Selection Sort com o array preenchido
        SelectionSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "SELECTION SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    //Botão do Shell Sort
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (ChecadorNull(SET)==false){  
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Shell Sort com o array preenchido
        ShellSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "SHELL SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton7ActionPerformed
    
    //Botão do Insertion Sort
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (ChecadorNull(SET)==false){  
        }else{
        //Se não estiver, cria um BenchMark pra medir o tempo
        BenchMark bmm = new BenchMark();
        bmm.reset();
        //Realiza o Insertion Sort com o array preenchido
        InsertionSort.sort(SET);
        bmm.setElapsed();
        //Chama o método que é exibido no LOG, com o tempo armazenado por bmm e o nome do sort
        log(bmm, "INSERTION SORT");
        //Chama o método que preenche a JTextArea2 com o array organizado
        OrderCP();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    //Botão para gerar 10 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        //Chama o gerador com 10 números
        SET=generateNumberArray (10,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 10
        informe(10);
    }//GEN-LAST:event_jButton8ActionPerformed

    //Botão para gerar 100 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //Chama o gerador com 100 números
        SET=generateNumberArray (100,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 100
        informe(100);
    }//GEN-LAST:event_jButton9ActionPerformed

    //Botão para gerar 500 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        //Chama o gerador com 500 números
        SET=generateNumberArray (500,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 500
        informe(500);         
    }//GEN-LAST:event_jButton10ActionPerformed

    //Botão para gerar 10.000 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        //Chama o gerador com 10.000 números
        SET=generateNumberArray (10000,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 10.000
        informe(10000);
    }//GEN-LAST:event_jButton11ActionPerformed

    //Botão para gerar 100.000 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        //Chama o gerador com 100.000 números
        SET=generateNumberArray (100000,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 100.000
        informe(100000);
        
    }//GEN-LAST:event_jButton12ActionPerformed
   
    //Botão para exportar o conteúdo da JTextArea2
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Serve para checar se o JTextArea2 está vazio, para que não seja exportado um arquivo vazio
        if (jTextArea2.getText().trim().length() == 0){
            //Se estiver vazio, ele não exporta e exibe uma mensagem para o usuário
            JOptionPane.showMessageDialog(this,"O campo selecionado para exportação está vazio.",
            "ERRO: Exportação de arquivo",JOptionPane.ERROR_MESSAGE);             
        }else{
        //Se não estiver vazio, chama o método exportador e exporta o conteúdo da JTextArea2
        exportData(jTextArea2.getText());}
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Botão para exportar o conteúdo da JTextArea3
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //Serve para checar se o JTextArea3 está vazio, para que não seja exportado um arquivo vazio
        if (jTextArea3.getText().trim().length() == 0){
            //Se estiver vazio, ele não exporta e exibe uma mensagem para o usuário
            JOptionPane.showMessageDialog(this,"O campo selecionado para exportação está vazio.",
            "ERRO: Exportação de arquivo",JOptionPane.ERROR_MESSAGE);           
        }else{
        //Se não estiver vazio, chama o método exportador e exporta o conteúdo da JTextArea3
        exportData(jTextArea3.getText());}
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    //Botão para realizar a importação de um arquivo de texto para o array SET e a jTextArea1
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        //Gera um array vazio para realizar a importação do array novo
        SET=generateNumberArray (0,0,0,0,0);
        //Chama o método responsável por realizar a importação
        importData();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    //Botão para apagar o conteúdo da JTextArea1 e zerar o array.
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        //Retira todo o conteúdo da JTextArea1, que mostra as localizações desordenadas
        jTextArea1.setText(null);
        //Gera um array nulo para sobrepor o array anterior
        SET=generateNumberArray (0,0,0,0,0);
    }//GEN-LAST:event_jButton13ActionPerformed

    //Botão para apagar o conteúdp da JTextArea2
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        //Retira todo o conteúdo da JTextArea2 que mostra as localizações ordenadas.
        //Aqui não tem a necessidade de gerar um array nulo, porque é a tela de resultado
        jTextArea2.setText(null); 
    }//GEN-LAST:event_jButton14ActionPerformed

    //Botão para apagar o conteúdp da JTextArea3 e zerar o atributo responsável por armazenamento do LOG
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        //Retira todo o conteúdo da JTextArea3, o LOG
        jTextArea3.setText(null);
        //Deixa o atributo responsável por armazenar o contúdo do LOG nula, para que valores novos não exibam os antigos
        logcontent="";
    }//GEN-LAST:event_jButton15ActionPerformed
  
    //Botão para gerar 50 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        //Chama o gerador com 50 números
        SET=generateNumberArray (50,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 50
        informe(50);
    }//GEN-LAST:event_jButton16ActionPerformed

    //Botão para gerar 1.000 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        //Chama o gerador com 1.000 números
        SET=generateNumberArray (1000,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 1.000
        informe(1000);
    }//GEN-LAST:event_jButton17ActionPerformed

    //Botão para gerar 5.000 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        //Chama o gerador com 5.000 números
        SET=generateNumberArray (5000,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informações a serem colocadas no LOG, com o número 5.000
        informe(5000);
    }//GEN-LAST:event_jButton18ActionPerformed
 
    //Botão para colocar a U.I no Tema Noturno
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        //Muda a cor de todos os os componentes da tela, para criar o Tema Noturno
        jPanel1.setBackground(new Color(20, 19, 19));
        jLabel6.setForeground(white);
        jLabel4.setForeground(white);
        jLabel7.setForeground(white);
        jLabel5.setForeground(white);
        jLabel1.setForeground(white);
        jLabel8.setForeground(white);
        jLabel10.setForeground(white);
        jLabel3.setForeground(white);
        jLabel2.setForeground(white);
        jButton8.setBackground(new Color(31, 43, 171));
        jButton8.setForeground(white);
        jButton16.setBackground(new Color(31, 43, 171));
        jButton16.setForeground(white);
        jButton9.setBackground(new Color(31, 43, 171));
        jButton9.setForeground(white);
        jButton10.setBackground(new Color(31, 43, 171));
        jButton10.setForeground(white);
        jButton17.setBackground(new Color(31, 43, 171));
        jButton17.setForeground(white);
        jButton18.setBackground(new Color(31, 43, 171));
        jButton18.setForeground(white);
        jButton11.setBackground(new Color(31, 43, 171));
        jButton11.setForeground(white);
        jButton12.setBackground(new Color(31, 43, 171));
        jButton12.setForeground(white);
        jButton19.setBackground(new Color(31, 43, 171));
        jButton19.setForeground(white);
        jButton13.setBackground(new Color(31, 43, 171));
        jButton13.setForeground(white);
        jButton2.setBackground(new Color(31, 43, 171));
        jButton2.setForeground(white);
        jButton4.setBackground(new Color(31, 43, 171));
        jButton4.setForeground(white);
        jButton7.setBackground(new Color(31, 43, 171));
        jButton7.setForeground(white);
        jButton3.setBackground(new Color(31, 43, 171));
        jButton3.setForeground(white);
        jButton5.setBackground(new Color(31, 43, 171));
        jButton5.setForeground(white);
        jButton6.setBackground(new Color(31, 43, 171));
        jButton6.setForeground(white);
        jButton1.setBackground(new Color(31, 43, 171));
        jButton1.setForeground(white);
        jButton14.setBackground(new Color(31, 43, 171));
        jButton14.setForeground(white);
        jButton15.setBackground(new Color(31, 43, 171));
        jButton15.setForeground(white);
        jButton20.setBackground(new Color(31, 43, 171));
        jButton20.setForeground(white);
        jTextArea1.setBackground(new Color(67, 68, 87));
        jTextArea1.setForeground(white);
        jTextArea2.setBackground(new Color(67, 68, 87));
        jTextArea2.setForeground(white);
        jTextArea3.setBackground(new Color(67, 68, 87));
        jTextArea3.setForeground(white);
        jTextField1.setBackground(new Color(67, 68, 87));
        jTextField1.setForeground(white);   
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    //Botão para colocar a U.I no Tema Padrão
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        //Muda a cor de todos os componentes da tela, para criar o Tema Padrão
        jPanel1.setBackground(new Color(255,204,102));
        jLabel6.setForeground(black);
        jLabel4.setForeground(black);
        jLabel7.setForeground(black);
        jLabel5.setForeground(black);
        jLabel1.setForeground(black);
        jLabel8.setForeground(black);
        jLabel10.setForeground(black);
        jLabel3.setForeground(black);
        jLabel2.setForeground(black);
        jButton8.setBackground(new Color(255, 255, 255));
        jButton8.setForeground(black);
        jButton16.setBackground(new Color(255, 255, 255));
        jButton16.setForeground(black);
        jButton9.setBackground(new Color(255, 255, 255));
        jButton9.setForeground(black);
        jButton10.setBackground(new Color(255, 255, 255));
        jButton10.setForeground(black);
        jButton17.setBackground(new Color(255, 255, 255));
        jButton17.setForeground(black);
        jButton18.setBackground(new Color(255, 255, 255));
        jButton18.setForeground(black);
        jButton11.setBackground(new Color(255, 255, 255));
        jButton11.setForeground(black);
        jButton12.setBackground(new Color(255, 255, 255));
        jButton12.setForeground(black);
        jButton19.setBackground(new Color(255, 255, 255));
        jButton19.setForeground(black);
        jButton13.setBackground(new Color(255, 255, 255));
        jButton13.setForeground(black);
        jButton2.setBackground(new Color(255, 255, 255));
        jButton2.setForeground(black);
        jButton4.setBackground(new Color(255, 255, 255));
        jButton4.setForeground(black);
        jButton7.setBackground(new Color(255, 255, 255));
        jButton7.setForeground(black);
        jButton3.setBackground(new Color(255, 255, 255));
        jButton3.setForeground(black);
        jButton5.setBackground(new Color(255, 255, 255));
        jButton5.setForeground(black);
        jButton6.setBackground(new Color(255, 255, 255));
        jButton6.setForeground(black);
        jButton1.setBackground(new Color(255, 255, 255));
        jButton1.setForeground(black);
        jButton14.setBackground(new Color(255, 255, 255));
        jButton14.setForeground(black);
        jButton15.setBackground(new Color(255, 255, 255));
        jButton15.setForeground(black);
        jButton20.setBackground(new Color(255, 255, 255));
        jButton20.setForeground(black);
        jTextArea1.setBackground(new Color(255,255,255));
        jTextArea1.setForeground(black);
        jTextArea2.setBackground(new Color(255,255,255));
        jTextArea2.setForeground(black);
        jTextArea3.setBackground(new Color(255,255,255));
        jTextArea3.setForeground(black);
        jTextField1.setBackground(new Color(255,255,255));
        jTextField1.setForeground(black);    
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    //Botão para exportar o conteúdo da JTextArea1
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
       //Serve para checar se o JTextArea1 está vazio, para que não seja exportado um arquivo vazio
        if (jTextArea1.getText().trim().length() == 0){
            //Se estiver vazio, ele não exporta e exibe uma mensagem para o usuário
            JOptionPane.showMessageDialog(this,"O campo selecionado para exportação está vazio.",
            "ERRO: Exportação de arquivo",JOptionPane.ERROR_MESSAGE);         
        }else{
        //Se não estiver vazio, chama o método exportador e exporta o conteúdo da JTextArea1
        exportData(jTextArea1.getText());}
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    
    private Info info = null;
    //Botão para exibir a tela de informações
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        //Cria e exibe a tela de informações 
        if (info == null) {
            info = new Info(this);}
            info.setVisible(true);    
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    //Botão para gerar 1.000.000 números aleatórios com latitude X e longitude Y dentro da Amazônia Legal
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        //Chama o gerador com 1.000.000 números
        SET=generateNumberArray (1000000,-1.074055,-9.309178,-69.607934,-46.202623);
        //Coloca o array gerado na JTextArea1
        Order();
        //Gera as informções a serem colocadas no LOG, com o número 1.000.000
        informe(1000000);
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    //Botão para gerar a quantidade de localizações desejadas pelo usuário
    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {                                          
       try{
       //Checa se o campo de inserção está vazio
       String a=jTextField1.getText();
       if (a.isEmpty()){
           //Se estiver, exibe uma mensagem para o usuário
           JOptionPane.showMessageDialog(this,"O campo está vazio.",
           "ERRO: Geração personalizada",JOptionPane.WARNING_MESSAGE);
           jTextField1.requestFocus();
           return;  
       }
       //Transforma o valor inserido em int
       int b = Integer.parseInt(a);
       //Checa se o valor a ser gerado é inferior a 1.000.000. O programa pode gerar tranquilamente quantidades maiores se esse if for removido,
       //mas para manter o controle esse número máximo foi determinado. Pode tirar se quiser testar professor.
       if (b>1000000){
         //Se o número inserido for maior que o número máximo determinado, exibe uma mensagem e fala pro usuário.
         JOptionPane.showMessageDialog(this,"A função de quantidade personalizada só permite valores iguais ou inferiores a 1.000.000",
         "ERRO: Geração personalizada",JOptionPane.ERROR_MESSAGE);
            jTextField1.setText("");
            jTextField1.requestFocus();
            return;
       }
       //Chama o gerador pra gerar localizações de acordo com a quantidade de números inserida pelo usuário
       SET=generateNumberArray (b,-1.074055,-9.309178,-69.607934,-46.202623);
       //Coloca o conteúdo na JTextArea1
       Order();
       //Realiza o informe no LOG com a quantidade de números inserida
       informe(b);
       }catch (NumberFormatException ex) {
           //Se o valor inserido pelo usuário for letras ou um valor não inteiro, exibe uma mensagem apra o usuário
           JOptionPane.showMessageDialog(this,"O campo só aceita numerais inteiros. Por favor insira valores numéricos inteiros!",
           "ERRO: Geração personalizada",JOptionPane.ERROR_MESSAGE);
           jTextField1.setText("");
           jTextField1.requestFocus();
        }                                                                                  
    }
    
    //Método que cria um novo objeto gerador de localizações
    public static long[] generateNumberArray(int size, double minX, double maxX, double minY, double maxY) {
        RandomNumberGenerator rng = new RandomNumberGenerator();
        //Faz a geração de acordo com os parâmetros inseridos
        return rng.genRandomNumberArray(size, minX, maxX, minY, maxY);
    }
    
    //Método que escreve o conteúdo no LOG
    private void log(BenchMark bmm, String TypeofSort){
       logaux=("Ordenação realizada em: " +"[ " + new Date() + " |  "+TypeofSort+ "] Array com " + SET.length + 
       " localizações. Duração total: " + bmm.getElapsed() + " milissegundos.\n\n");
       //Realiza a soma das strings. Não é o ideal, mas como o LOG geralmente não vai ter muito conteúdo, 
       //é possível fazer assim
       logcontent=logcontent+logaux;  
       jTextArea3.setText(logcontent);
    }
    
    //Método responsável pela escrita de conteúdo na JTextArea1, que tem como conteúdo o array desorganizado
     private void Order(){
       //Cria um StringBuilder
       StringBuilder result = new StringBuilder();
       //Apaga o conteúdo prévio da JTextArea2
       jTextArea2.setText(null);
       //For que usa o atributo "j" para realizar a contagem de acordo com o tamanho do array SET,
       //para que todos os números sejam armazenados
       for (int j = 0; j < SET.length; j++) {
           //Coloca no StringBuilder criado o valor string do número "j" do array, e pula uma linha
           result.append(String.valueOf(String.valueOf(SET[j])+"\n"));    
        }
       //Quando acaba, converte o o StringBuilder para string
       String singleString = result.toString();
       //Coloca o conteúdo do String da JTextArea1
       jTextArea1.setText(singleString);
    }
  
     //Método responsável pela escrita de conteúdo na JTextArea1, que tem como conteúdo o array organizado
     private void OrderCP(){
       //Cria um StringBuilder
       StringBuilder result = new StringBuilder();
       //Apaga o conteúdo prévio da JTextArea2
       jTextArea2.setText(null);   
       //For que usa o atributo "j" para realizar a contagem de acordo com o tamanho do array SET,
       //para que todos os números sejam armazenados
       for (int j = 0; j < SET.length; j++) {
           result.append(String.valueOf(String.valueOf(SET[j])+"\n"));    
        }
       //Quando acaba, converte o o StringBuilder para string
       String singleString = result.toString();
       //Coloca o conteúdo do String da JTextArea2
       jTextArea2.setText(singleString);
    }
   
   //Método responsável pela exportação de dados
   private void exportData(String content) {
       //Cria FileWriter 
       FileWriter exp;
        try {
            //Determina o conteúdo a ser salvo para o usuário e a terminação txt
            String filename = saveFile("Arquivos TXT", "txt");
            exp= new FileWriter(filename);
            //Escreve o conteúdo, salvando o arquivo
            exp.write(content);
            //Encerra o FileWriter
            exp.close();
            //Exibe no LOG onde o conteúdo foi salvo
            logaux=("Exportado com sucesso para: " + filename +"\n\n" );
            logcontent=logcontent+logaux;  
            jTextArea3.setText(logcontent);     
        } catch (IOException |NullPointerException ex) {
            //Caso o destino não for selecionado e a operação cancelada, exibe uma mensagem para
            //o usuário informando isso
            JOptionPane.showMessageDialog(this,"Destino não selecionado. Operação de exportação não realizada.",
            "ERRO: Exportação de arquivo",JOptionPane.ERROR_MESSAGE);
        }
    }
   
   
   //Método responsável pela importação de arquivos. Esse foi complexo de fazer certinho com todos os erros professor
   private Long[] importData() {
        try {
            //Abre a tela para que o usuário selecione o arquivo a ser importado e salve em string o lugar
            String filename = openFile("Arquivos TXT", "txt");
            //Abre o arquivo com a string do lugar salvo anteriormente
            Path path = Paths.get(filename);
            //Lista para ler todas as linhas da path selecionado
            List<String> lines = Files.readAllLines(path);
            if (lines.isEmpty()){
                //Caso o arquivo esteja vazio, exibe uma mensagem para o usuário
                JOptionPane.showMessageDialog(this,"O arquivo selecionado para importação está vazio!.",
                "ERRO: Importação de arquivo",JOptionPane.ERROR_MESSAGE);
            }
            //Cria o StringBuilder para armazenar o conteúdo, junto com um array long
            StringBuilder result = new StringBuilder();
            Long[] spl = new Long[]{};
            //For para ler todas as linhas da lista
                for (String line : lines) {
                try {
                    //Adiciona o conteúdo ao StringBuilder, e pula uma linha
                    result.append(line); 
                    result.append("\n");
                    //Pega o conteúdo long da linha que está sendo lida no momento
                    g = Long.valueOf(line);
                } catch (NumberFormatException ex) {
                    //Se a linha possuir conteúdo não numérico, exibe uma mensagem para o usuário e para a operação
                    JOptionPane.showMessageDialog(this,"O arquivo selecionado possui conteúdo não numérico.",
                   "ERRO: Importação de arquivo",JOptionPane.ERROR_MESSAGE);
                    result.setLength(0);
                    break;
                }
                //Variáveis auxiliares para as operações seguintes 
                int n = SET.length;
                long f=g; 
                //Chama o método addX, que é responsável por adicionar o valor de f no array SET. Assim ele vai sempre
                //adcionando o último valor lido no array, até os valores acabarem
                SET = addX(n, SET, f);            
            }
            //Transforma o StringBuilder em String
            String singleString = result.toString();
            //Coloca a string criada na JTextArea1
            jTextArea1.setText(singleString); 
            //Se o tamanho da String for maior que 0, significa que o array não está vazio. Ai ele realiza as operações
            if (g>0||result.length()>0){ 
            //Adiciona ao LOG o lugar de onde o arquivo foi importado
            logaux=(filename + " foi importado com sucesso!" + "\n\n" );
            logcontent=logcontent+logaux;  
            jTextArea3.setText(logcontent);
            //Retorna o array
            return spl;
            }
             } catch (IOException |NullPointerException ex) {
                 //Caso o local do arquivo não seja selecionado, exibe uma mensagem para o usuário não realizando a operação
                JOptionPane.showMessageDialog(this,"Arquivo não selecionado. Operação de importação não realizada.",
                "ERRO: Importação de arquivo",JOptionPane.ERROR_MESSAGE);
             }
          //Retorna um array nulo caso a operação falhe
          return null;
        }
    
   //Responsável por adicionar elementos dinamicamente no array
   public static long[] addX (int n, long arr[], long x) 
    { 
        int i; 
        //Array novo com o tamanho de SET + 1
        long ne[] = new long [n + 1]; 
        for (i = 0; i < n; i++) 
            //Copia o Array SET para o  Array ne
            ne[i] = arr[i];
            //Adiciona o número passado como parâmetro na última posição
             ne[n] = x; 
        //Retorna o array com um elemento novo adicionado no final
        return ne; 
    }   
   
   //Método para abrir o arquivo
   private String openFile(String desc, String ext) {
        //Cria um JFileChooser browseFile, que recebe a descrição Arquivos TXT e a terminação txt como parâmetros
        JFileChooser fc = browseFile(desc, ext);
        //Coloca conteúdo ja JLabel3, para informar o usuário que uma operação está acontecendo. Em operações
        //de importação curtas, o procedimento é tão rápido que nem se da para ver isso
        jLabel3.setText("Importando arquivo. Por favor aguarde...");
        if (fc.showOpenDialog(new javax.swing.JButton()) == JFileChooser.APPROVE_OPTION) {
            //Se tudo der certo, apaga o conteúdo da jLabel3 e retorna a path do arquivo
            jLabel3.setText(null);
            return fc.getSelectedFile().getAbsolutePath();
        } else jLabel3.setText(null);
            //Se não der, simplesmente apaga o conteúdo da JLabel3. O tratamento de possíveis erros é feito em outros lugares
            return null;
    }

      //Responsável por salvar arquivos
      private String saveFile(String desc, String ext) {
          //Cria um JFileChooser com browseFile
        JFileChooser fc = browseFile(desc, ext);
        //Cria nova file com a terminação .txt
        fc.setSelectedFile(new File("." + ext));
        if (fc.showSaveDialog(new javax.swing.JButton()) == JFileChooser.APPROVE_OPTION) {
            //Se der certo retorna a path do arquivo
            return fc.getSelectedFile().getAbsolutePath();
        //Se não der, retorna null. O tratamento de possíveis erros é feito em outros lugares
        } else return null;
    }
      
      //Cria o browseFile, que é a tela de selecionar arquivos
      private javax.swing.JFileChooser browseFile(String desc, String ext) {
        JFileChooser fc = new JFileChooser();
        //Abre ela no diretório atual
        fc.setCurrentDirectory(new java.io.File("."));
        //Texto que aparece para orientação
        fc.setDialogTitle("Selecione o arquivo...");
        fc.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(desc, ext));
        //Retorna o JFileChooser
        return fc;
    }
      
      //Realiza o informe das operações de geramento, recebendo o parâmetros int nn
      private void informe(int nn){
          //Mostra quantos números o array possui, e consequentemente quantos foram ordenados.
          logaux=( "Operação de geramento: "+nn + " localizações aleatórias geradas com êxito. \n\n");
          logcontent=logcontent+logaux;  
          jTextArea3.setText(logcontent);
      }
      
      //Método para checar se o array esta vazio antes de realizar a ordenação
      private boolean ChecadorNull(long[] a){
            //Checa se o array SET está vazio
            if (a.length ==0){
            //Se estiver, exibe uma mensagem para o usuário
            JOptionPane.showMessageDialog(this,"Não existem valores a serem ordenados.",
            "ERRO: Ordenação",JOptionPane.ERROR_MESSAGE);
                //Retorna false, que é usado no if dos botões de geração
                return false;
            }else {
            //Retorna true, que é usado no if dos botões de geração
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //Cria a tela e a torna visível
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

